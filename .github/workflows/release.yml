name: Release

env:
  PROJECT: Jerboa

on:
  push:
    tags:     'v*'
  workflow_dispatch:

jobs:

  linuxNative:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y xorg-dev build-essential mesa-common-dev libx11-dev libxrandr-dev libgl1-mesa-dev libglu1-mesa-dev libfreetype6-dev libopenal-dev libsndfile1-dev libudev-dev libxinerama-dev libxcursor-dev vulkan-tools libvulkan-dev vulkan-validationlayers-dev spirv-tools xvfb x11-apps imagemagick

    - name: get hop
      run: ./getLibs.sh

    - name: linux native build
      run: |
        source version.sh
        ./build.sh -r
        mkdir linuxbuild
        cp build/$PROJECT/$PROJECT linuxbuild/
        mv build/$PROJECT/res linuxbuild/
        cp LICENSE linuxbuild/
        cp LICENSES.md linuxbuild/
        cp README.md linuxbuild/

    - name: sign build
      run: |
        export GPG_TTY=$(tty)
        echo "${{ secrets.GPG_KEY }}" > priv
        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" --import priv
        rm priv

        cd linuxbuild
        md5sum $PROJECT > $PROJECT.md5

        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" -b $PROJECT

    - name: buildArtifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT }}-linux-x86_64
        path: linuxbuild

  linuxXwindows:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y xorg-dev build-essential mesa-common-dev libx11-dev libxrandr-dev libgl1-mesa-dev libglu1-mesa-dev libfreetype6-dev libopenal-dev libsndfile1-dev libudev-dev g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix libz-mingw-w64-dev mingw-w64-common libxinerama-dev libxcursor-dev vulkan-tools libvulkan-dev vulkan-validationlayers-dev spirv-tools wine64

    - name: get hop
      run: ./getLibs.sh

    - name: windows mingw build
      run: |
        source version.sh
        ./build.sh -r -w
        mkdir windowsbuild
        cp build/$PROJECT/$PROJECT.exe windowsbuild/
        mv build/$PROJECT/res windowsbuild/
        cp build/libwinpthread* windowsbuild/
        cp LICENSE windowsbuild/
        cp LICENSES.md windowsbuild/
        cp README.md windowsbuild/

    - name: sign build
      run: |
        export GPG_TTY=$(tty)
        echo "${{ secrets.GPG_KEY }}" > priv
        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" --import priv
        rm priv

        cd windowsbuild
        md5sum $PROJECT.exe > $PROJECT.exe.md5

        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" -b $PROJECT.exe

    - name: buildArtifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT }}-windows
        path: windowsbuild

  macosNative:
    runs-on: macos-12

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
          wget https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg
          hdiutil attach vulkan-sdk.dmg -mountpoint /Volumes/vulkan-sdk
          mkdir ~/vulkan
          cd /Volumes/vulkan-sdk/
          sudo ./InstallVulkan.app/Contents/macOS/InstallVulkan --root ~/vulkan --accept-licenses --default-answer --confirm-command install
          ls ~/vulkan
          cd ~/vulkan/
          python install_vulkan.py
          brew install md5sha1sum

    - name: get hop
      run: ./getLibs.sh

    - name: macos native build
      run: |
        source version.sh
        ./build.sh -r -o
        mkdir macosbuild
        cp build/$PROJECT/$PROJECT macosbuild/
        mv build/$PROJECT/res macosbuild/

    - name: sign build
      run: |
        export GPG_TTY=$(tty)
        echo "${{ secrets.GPG_KEY }}" > priv
        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" --import priv
        rm priv

        cd macosbuild
        md5sum $PROJECT > $PROJECT.md5

        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" -b $PROJECT
        cd

    - name: create .app bundle
      run: |
        source version.sh
        mkdir $PROJECT.app
        mkdir $PROJECT.app/Contents
        mkdir $PROJECT.app/Contents/Resources
        mkdir $PROJECT.app/Contents/MacOS
        cp macosbuild/$PROJECT $PROJECT.app/Contents/MacOS
        cp -r macosbuild/res $PROJECT.app/Contents/Resources
        cp macosbuild/*.sig $PROJECT.app/Contents/Resources
        cp macosbuild/*.md5 $PROJECT.app/Contents/Resources
        cp LICENSE $PROJECT.app/Contents/Resources
        cp LICENSES.md $PROJECT.app/Contents/Resources
        cp README.md $PROJECT.app/Contents/Resources

        cp common/macos/icon.icns $PROJECT.app/Contents/Resources/icons.icns
        cp common/macos/Info.plist $PROJECT.app/Contents/

        source common/replace.sh $PROJECT.app/Contents/Info.plist INFO_STRING "$PROJECT (C) Jerboa - GPLv3"
        source common/replace.sh $PROJECT.app/Contents/Info.plist EXE $PROJECT
        source common/replace.sh $PROJECT.app/Contents/Info.plist ID app.jerboa.$PROJECT
        source common/replace.sh $PROJECT.app/Contents/Info.plist NAME $PROJECT
        source common/replace.sh $PROJECT.app/Contents/Info.plist VERSION "$PRODUCT-$MAJOR.$MINOR.$PATCH"
        rm $PROJECT.app/Contents/Info.plist-e

        mkdir pkg
        cp -r $PROJECT.app pkg/
        cd

    - name: buildArtifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT }}-macos
        path: pkg

  release:
    needs: [linuxNative, macosNative, linuxXwindows]
    if: github.ref_type == 'tag'
    runs-on: ubuntu-22.04

    steps:

      - name: get linux build
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT }}-linux-x86_64

      - name: bundle linux
        run: |
          mkdir $PROJECT-linux-x86_64
          cp $PROJECT.* $PROJECT-linux-x86_64/
          cp $PROJECT $PROJECT-linux-x86_64/
          cp -r res $PROJECT-linux-x86_64/
          cp LICENSE* $PROJECT-linux-x86_64/
          cp README.md $PROJECT-linux-x86_64/
          chmod +x $PROJECT-linux-x86_64/$PROJECT
          tar -cvJf $PROJECT-linux-x86_64.tar.xz -C $PROJECT-linux-x86_64/ .

      - name: get windows build
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT }}-windows

      - name: bundle windows
        run: |
          mkdir $PROJECT-windows
          cp $PROJECT.exe $PROJECT-windows/
          cp $PROJECT.exe.* $PROJECT-windows/
          cp *.dll $PROJECT-windows/
          cp -r res $PROJECT-windows/
          cp LICENSE* $PROJECT-windows/
          cp README.md $PROJECT-windows/
          cd $PROJECT-windows && zip -r ../$PROJECT-windows.zip . && cd ..

      - name: get macos build
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT }}-macos

      - name: bundle macos
        run: |
          chmod +x $PROJECT.app/Contents/MacOS/$PROJECT
          tar -cvJf $PROJECT-macOS.tar.xz $PROJECT.app

      - name: release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: true
          name: "${{ env.PROJECT }} ${{ github.ref_name }}"
          tag_name: ${{ github.ref }}
          files: |
            ${{ env.PROJECT }}-linux-x86_64.tar.xz
            ${{ env.PROJECT }}-windows.zip
            ${{ env.PROJECT }}-macOS.tar.xz
